---
- name: Créer la structure de répertoires
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
  loop:
    - "{{ app_root }}"
    - "{{ app_root }}/storage"
    - "{{ app_root }}/bootstrap/cache"

- name: Configurer les permissions temporaires
  block:
    - name: Vérifier l'existence de l'utilisateur
      command: id -u "{{ ansible_user }}"
      register: user_check
      changed_when: false
      ignore_errors: yes

    - name: Appliquer les permissions temporaires
      file:
        path: "{{ app_root }}"
        owner: "{{ ansible_user if user_check.rc == 0 else omit }}"
        group: "{{ ansible_user if user_check.rc == 0 else omit }}"
        recurse: yes
      when: not ansible_check_mode
  rescue:
    - debug:
        msg: "L'utilisateur {{ ansible_user }} n'existe pas, continuation sans changer le propriétaire"

- name: Configurer l'accès SSH pour Git
  block:
    - name: Créer le répertoire .ssh
      file:
        path: "/root/.ssh"
        state: directory
        mode: '0700'
        owner: root
        group: root
        
    - name: Validate SSH Key Format
      debug:
        msg: "Key starts with: {{ SSH_PRIVATE_KEY[:30] if SSH_PRIVATE_KEY is defined else 'KEY_NOT_DEFINED' }}"

    - name: Installer la clé SSH déployée
      ansible.builtin.copy:
        content: "{{ SSH_PRIVATE_KEY | trim }}"
        dest: "/root/.ssh/github_actions_deploy"
        mode: '0600'
        owner: root
        group: root
      no_log: false
      when: SSH_PRIVATE_KEY is defined

    - name: Configurer SSH pour GitHub
      copy:
        content: |
          Host github.com
            HostName github.com
            IdentityFile ~/.ssh/github_actions_deploy
            User git
            StrictHostKeyChecking no
        dest: "/root/.ssh/config"
        mode: '0600'
        owner: root
        group: root

- name: Cloner ou mettre à jour le dépôt Git
  block:
    - name: Effectuer le clone initial
      ansible.builtin.git:
        repo: "{{ app_repo }}"
        dest: "{{ app_root }}"
        version: "{{ app_branch }}"
        key_file: "~/.ssh/github_actions_deploy"
        accept_hostkey: yes
        depth: 1
        force: yes
      register: git_result
      retries: 3
      delay: 10
      until: git_result is succeeded

    - name: Mettre à jour le dépôt existant
      ansible.builtin.git:
        repo: "{{ app_repo }}"
        dest: "{{ app_root }}"
        version: "{{ app_branch }}"
        key_file: "~/.ssh/id_ed25519"
        update: yes
      when: not git_result.changed

- name: Restaurer les permissions de l'application
  file:
    path: "{{ app_root }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    recurse: yes
  when: not ansible_check_mode

- name: Déployer le fichier .env
  template:
    src: "laravel/.env.j2"
    dest: "{{ app_root }}/.env"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: "0640"
  no_log: true

- name: Installer les dépendances Composer
  community.general.composer:
    command: install
    working_dir: "{{ app_root }}"
    no_dev: false
    optimize_autoloader: true
  environment:
    COMPOSER_MEMORY_LIMIT: -1

- name: Configurer les permissions critiques
  file:
    path: "{{ item.path }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse | default(false) }}"
  loop:
    - { path: "{{ app_root }}/storage", mode: '0775', recurse: true }
    - { path: "{{ app_root }}/bootstrap/cache", mode: '0775', recurse: true }
    - { path: "{{ app_root }}/.env", mode: '0640' }

- name: Optimiser l'application
  command: php artisan optimize
  args:
    chdir: "{{ app_root }}"
  notify: restart php-fpm

- name: Vérifier l'état des migrations
  command: php artisan migrate:status
  args:
    chdir: "{{ app_root }}"
  register: migration_status
  changed_when: false

- name: Exécuter les migrations si nécessaires
  command: php artisan migrate --force
  args:
    chdir: "{{ app_root }}"
  when: "'Pending' in migration_status.stdout"
  notify:
    - clear cache
    - restart php-fpm

- name: Déployer la configuration Nginx
  template:
    src: "nginx/laravel.conf.j2"
    dest: "/etc/nginx/sites-available/{{ app_name }}.conf"
  notify: reload nginx

- name: Activer le site Nginx
  file:
    src: "/etc/nginx/sites-available/{{ app_name }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ app_name }}.conf"
    state: link
  notify: reload nginx

- name: Valider la configuration Nginx
  command: nginx -t
  changed_when: false
  notify: reload nginx